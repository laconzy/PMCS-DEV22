<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Production_Model extends CI_Model {    public function __construct() {        parent::__construct();        $this->load->database();    }    /*     * public function create($data) {      $this->db->insert_batch('cut_bundles', $data);      } */    public function destroy(/* $order_id, */$operation_id, /* $operation_point, */ $barcode) {        //$this->db->where('order_id', $order_id);        $this->db->where('operation', $operation_id);        //$this->db->where('operation_point', $operation_point);        $this->db->where('barcode', $barcode);        $this->db->delete('production');        return true;    }    /*  public function destroy_all($laysheet_no) {      $this->db->where('laysheet_no', $laysheet_no);      $this->db->delete('cut_bundles');      return true;      } */    public function get_cut_bundle($barcode) {        $this->db->select('cut_bundles.*');        $this->db->from('cut_bundles');        $this->db->where('barcode', $barcode);        $query = $this->db->get();        return $query->row_array();    }    public function get_barcode_data($barcode) {//         $insert_data = [//            'order_id' => $data['order_id'],//            'laysheet_no' => $data['laysheet_no'],//            'bundle_no' => $data['bundle_no'],//            'barcode' => $data['barcode'],//            'item' => $data['item'],//            'size' => $data['size'],//            'qty' => $data['qty'],//            'color' => $data['color'],//            'created_by' => $user,//            'created_date' => $cur_date,//            'operation' => $operation,//            'operation_point' => $operation_point,//            'line_no' => $line_no,//            'scan_date' => $scan_date//        ];        $sql = "SELECTbarcode.id laysheet_no,barcode.barcode_no,barcode.`no` bundle_no,barcode.printed_by,barcode.printed_date,fg_barcode.barcode,fg_barcode.size_id size,fg_barcode.item_id item,fg_barcode.qty,fg_barcode.color,size.size_code,item.item_code,fg_barcode.order_idFROMbarcodeINNER JOIN fg_barcode ON barcode.id = fg_barcode.idINNER JOIN fg_barcode_head ON fg_barcode.id = fg_barcode_head.idINNER JOIN size ON fg_barcode.size_id = size.size_idINNER JOIN item ON fg_barcode.item_id = item.item_idWHEREbarcode.barcode_no = '$barcode'";        $query = $this->db->query($sql);        return $query->result_array();    }    /* public function get_cut_details_summery($laysheet){      $sql = 'select cut_plan_detail.*,size.size_code,order_item_sizes.planned_qty,      IFNULL(SUM(cut_bundles.qty), 0)as bundle_qty,      (cut_plan_detail.qty - IFNULL(SUM(cut_bundles.qty), 0)) as remaning_qty from cut_plan_detail      inner join size on size.size_id = cut_plan_detail.size      inner join cut_laysheet on cut_laysheet.laysheet_no = cut_plan_detail.laysheet_no      inner join order_items on order_items.order_id = cut_laysheet.order_id and order_items.item = cut_laysheet.item_id      inner join order_item_sizes on order_item_sizes.order_item_id = order_items.id and order_item_sizes.size = cut_plan_detail.size      left join cut_bundles on cut_bundles.laysheet_no = cut_laysheet.laysheet_no and cut_bundles.size = cut_plan_detail.size      where cut_plan_detail.laysheet_no = ? GROUP BY cut_plan_detail.size';      $query = $this->db->query($sql,[$laysheet]);      return $query->result_array();      } */    /* public function get_laysheet_size_details($laysheet){      $this->db->select('cut_plan_detail.*');      $this->db->from('cut_plan_detail');      $this->db->where('laysheet_no',$laysheet);      $query = $this->db->get();      return $query->result_array();      } */    /* public function get_laysheet_max_bundle_no($laysheet_no){      $this->db->select_max('bundle_no');      $this->db->where('laysheet_no',$laysheet_no);      $query = $this->db->get('cut_bundles');      $data = $query->row_array();      if($data['bundle_no'] == null || $data['bundle_no'] == false)      return 1;      else      return ($data['bundle_no'] + 1);      } */    /* public function get_laysheet_remaning_qty($laysheet_no){      $sql = 'select cut_plan_detail.size,cut_plan_detail.qty,      (cut_plan_detail.qty - IFNULL(SUM(cut_bundles.qty),0)) as remaning_qty      from cut_plan_detail      left join cut_bundles on cut_plan_detail.laysheet_no=cut_bundles.laysheet_no and cut_plan_detail.size=cut_bundles.size      where cut_plan_detail.laysheet_no = ? group by cut_plan_detail.size';      $query = $this->db->query($sql , [$laysheet_no]);      $result = $query->result_array();      $data = [];      foreach($result as $row) {      $data[$row['size']] = $row['remaning_qty'];      }      //  print_r($data);die();      return $data; //return {size_id : remaning_qty}      } */    /* public function get_bundle_chart($laysheet){      $this->db->select('cut_bundles.*,size.size_code');      $this->db->join('size' , 'size.size_id = cut_bundles.size');      $this->db->from('cut_bundles');      $this->db->where('cut_bundles.laysheet_no' , $laysheet);      $query = $this->db->get();      return $query->result_array();      } */    public function is_barcode_exists(/* $order_id, */$operation, /* $operation_point, */ $barcode) {        $this->db->from('production');        //$this->db->where('order_id',$order_id);        $this->db->where('operation', $operation);        //$this->db->where('operation_point',$operation_point);        $this->db->where('barcode', $barcode);        $count = $this->db->count_all_results();        return ($count > 0) ? true : false;    }    public function add_item_to_production($data, $operation, $operation_point, $line_no, $scan_date) {        $user = $this->session->userdata('user_id');        $cur_date = date("Y-m-d H:i:s");        $insert_data = [            'order_id' => $data['order_id'],            'laysheet_no' => $data['laysheet_no'],            'bundle_no' => $data['bundle_no'],            'barcode' => $data['barcode'],            'item' => $data['item'],            'size' => $data['size'],            'qty' => $data['qty'],            'color' => $data['color'],            'created_by' => $user,            'created_date' => $cur_date,            'operation' => $operation,            'operation_point' => $operation_point,            'line_no' => $line_no,            'scan_date' => $scan_date        ];        $this->db->insert('production', $insert_data);        return true;    }    public function add_manual_item_to_production($data, $operation, $operation_point, $line_no, $scan_date) {        $user = $this->session->userdata('user_id');        $cur_date = date("Y-m-d H:i:s");        foreach ($data as $row) {            $insert_data = [                'order_id' => $row['order_id'],                'laysheet_no' => $row['laysheet_no'],                'bundle_no' => $row['bundle_no'],                'barcode' => $row['barcode_no'],                'item' => $row['item'],                'size' => $row['size'],                'qty' => $row['qty'],                'color' => $row['color'],                'created_by' => $user,                'created_date' => $cur_date,                'operation' => $operation,                'operation_point' => $operation_point,                'line_no' => $line_no,                'scan_date' => $scan_date            ];            $this->db->insert('production', $insert_data);        }        return true;    }    public function get_bundle_from_production(/* $order_id, */$operation, /* $operation_point, */ $barcode) {        $this->db->select('production.*,size.size_code,line.line_code,item.item_code,color.color_code');        $this->db->from('production');        $this->db->join('size', 'production.size = size.size_id');        $this->db->join('item', 'production.item = item.item_id');        $this->db->join('color', 'production.color = color.color_id');        $this->db->join('line', 'production.line_no = line.line_id', 'left');        //$this->db->where('production.order_id',$order_id);        $this->db->where('production.operation', $operation);        //$this->db->where('production.operation_point',$operation_point);        $this->db->where('production.barcode', $barcode);        $query = $this->db->get();        return $query->row_array();    }    public function get_bundle_from_grn($order_id, $operation, $barcode) {        $this->db->select('grn_details.*,size.size_code');        $this->db->from('grn_details');        $this->db->join('size', 'grn_details.size = size.size_id');        $this->db->where('grn_details.order_id', $order_id);        $this->db->where('grn_details.operation', $operation);        $this->db->where('grn_details.barcode', $barcode);        $query = $this->db->get();        return $query->row_array();    }}